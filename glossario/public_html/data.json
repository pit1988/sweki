{
    "0": {
        "id": "ingegneria",
        "voce": "ingegneria",
        "def": "L'applicazione di princ\u00ecpi scientifici e matematici per scopi pratici.",
        "eng": "engineering"
    },
    "1": {
        "id": "ingegneria_del_software",
        "voce": "ingegneria del software",
        "def": "Applicazione di un approccio sistematico, disciplinato e quantificabile allo sviluppo, al funzionamento e al mantenimento del software.",
        "eng": "software engineering"
    },
    "2": {
        "id": "sistematico",
        "voce": "sistematico",
        "def": "Che abbraccia un metodo.",
        "eng": "systematic"
    },
    "3": {
        "id": "disciplinato",
        "voce": "disciplinato",
        "def": "Che segue le norme (anzi, la best practice).",
        "eng": "disciplined"
    },
    "4": {
        "id": "quantificabile",
        "voce": "quantificabile",
        "def": "Esprimibile in modo quantitativo.",
        "eng": "quantifiable"
    },
    "7": {
        "id": "best_practice",
        "voce": "best practice",
        "def": "La prassi che, per esperienza e per studio, abbia mostrato di garantire i migliori risultati in circostanze note e specifiche.",
        "eng": "best practice"
    },
    "8": {
        "id": "prassi",
        "voce": "prassi",
        "def": "Modo di fare.",
        "eng": "practice"
    },
    "9": {
        "id": "stakeholder",
        "voce": "stakeholder",
        "def": "Persona a vario titolo coinvolta nel ciclo di vita di un software che ha influenza sul prodotto o sul processo.",
        "eng": "stakeholder"
    },
    "11": {
        "id": "processo_software",
        "voce": "processo software",
        "def": "Processo che porta ad un prodotto software.",
        "eng": "software process"
    },
    "12": {
        "id": "attivit\u00e0",
        "voce": "attivit\u00e0",
        "def": "Parte di un processo che dev'essere compiuta entro un determinato periodo di tempo.",
        "eng": "activity"
    },
    "13": {
        "id": "compito",
        "voce": "compito",
        "def": "Parte di un'attivit\u00e0. Si pu\u00f2 svolgere usando qualche tecnica: ricetta applicata agli strumenti disponibili",
        "eng": "task"
    },
    "14": {
        "id": "tecnica",
        "voce": "tecnica",
        "def": "Ricetta applicata agli strumenti disponibili; modo con cui si usa uno strumento.",
        "eng": "technique"
    },
    "15": {
        "id": "strumento",
        "voce": "strumento",
        "def": "Insieme di concetti e di metodi, con delle tecnologie di supporto.",
        "eng": "tool"
    },
    "16": {
        "id": "tecnologia",
        "voce": "tecnologia",
        "def": "Strumento sul quale si opera.",
        "eng": "technology"
    },
    "17": {
        "id": "standard_di_processo",
        "voce": "standard di processo",
        "def": "Riferimento di base generico usato come stile comune per lo svolgimento delle funzioni aziendali, pensato per una collettivit\u00e0 di casi afferenti ad un certo dominio applicativo.",
        "eng": "process standard"
    },
    "21": {
        "id": "ciclo_PDCA",
        "voce": "ciclo PDCA (o ciclo di Deming)",
        "def": "Schema iterativo di auto-miglioramento che consiste di quattro punti: Plan (individuare obiettivi di miglioramento), Do (eseguire ci\u00f2 che si \u00e8 pianificato), Check (verificare se ha funzionato) e Act (agire per correggersi).",
        "eng": "PDCA cycle"
    },
    "22": {
        "id": "ciclo_di_vita_prodotto",
        "voce": "ciclo di vita (di un prodotto)",
        "def": "Insieme degli stati che il prodotto assume, dal concepimento al ritiro.",
        "eng": "software product life cycle"
    },
    "23": {
        "id": "ciclo_di_vita_sviluppo",
        "voce": "ciclo di vita dello sviluppo (di un prodotto)",
        "def": "Parte del ciclo di vita di un prodotto che riguarda il suo sviluppo.",
        "eng": "software development life cycle"
    },
    "24": {
        "id": "ritiro",
        "voce": "ritiro (di un prodotto)",
        "def": "Momento in cui il prodotto cessa di essere seguito dai suoi creatori.",
        "eng": "retirement"
    },
    "25": {
        "id": "fase_di_ciclo_di_vita",
        "voce": "fase (di un ciclo di vita)",
        "def": "Durata temporale (che non si ripete) entro uno stato del ciclo di vita e un altro.",
        "eng": "phase"
    },
    "27": {
        "id": "incarico",
        "voce": "incarico",
        "def": "null",
        "eng": "assignment"
    },
    "28": {
        "id": "impegno",
        "voce": "impegno",
        "def": "null",
        "eng": "commitment"
    },
    "32": {
        "id": "analista",
        "voce": "analista (profilo professionale)",
        "def": "Chi ha il compito di individuare, a partire dai bisogni del cliente, il problema da fornire ad un progettista; fa l'analisi dei requisiti.",
        "eng": "analyst"
    },
    "33": {
        "id": "progettista",
        "voce": "progettista (profilo professionale)",
        "def": "Chi sintetizza una soluzione a partire dalle specifiche di un problema gi\u00e0 analizzato.",
        "eng": "designer"
    },
    "34": {
        "id": "programmatore",
        "voce": "programmatore (profilo professionale)",
        "def": "Chi implementa una parte della soluzione dei progettisti.",
        "eng": "programmer"
    },
    "36": {
        "id": "responsabile_di_progetto",
        "voce": "responsabile di progetto (profilo professionale)",
        "def": "Chi pianifica il progetto, assegna le persone ai ruoli giusti e rappresenta il progetto presso il fornitore e il committente.",
        "eng": "project manager"
    },
    "38": {
        "id": "controllore_della_qualit\u00e0",
        "voce": "controllore della qualit\u00e0 (profilo professionale)",
        "def": "Funzione aziendale (e non ruolo di progetto) che accerta la qualit\u00e0 dei prodotti.",
        "eng": "null"
    },
    "39": {
        "id": "pianificazione",
        "voce": "pianificazione",
        "def": "Organizzare e controllare tempo, risorse e risultati.",
        "eng": "planning"
    },
    "40": {
        "id": "analisi_dei_requisiti",
        "voce": "analisi dei requisiti",
        "def": "Definire cosa bisogna fare.",
        "eng": "requirements analysis"
    },
    "42": {
        "id": "progettazione_architetturale",
        "voce": "progettazione architetturale",
        "def": "Definizione delle componenti e di come esse sono organizzate in un sistema.",
        "eng": "architectural design"
    },
    "46": {
        "id": "diagramma_PERT",
        "voce": "diagramma PERT (Project Evaluation and Review Technique)",
        "def": "Rete che rappresenta le dipendenze temporali (e le criticit\u00e0) tra attivit\u00e0 di un progetto.",
        "eng": "PERT diagram"
    },
    "47": {
        "id": "revisione_esterna",
        "voce": "revisione esterna",
        "def": "Ispezione ufficiale di un prodotto condotta da un'organizzazione indipendente da chi ha sviluppato il prodotto.",
        "eng": "audit"
    },
    "48": {
        "id": "revisione_interna",
        "voce": "revisione interna",
        "def": "Ispezione di un prodotto interna all'organizzazione che lo sviluppa.",
        "eng": "joint review"
    },
    "49": {
        "id": "rete",
        "voce": "rete",
        "def": "Grafo orientato.",
        "eng": "network"
    },
    "50": {
        "id": "slack_time",
        "voce": "slack time",
        "def": "Quantit\u00e0 di tempo tra la data minima a partire da cui un evento pu\u00f2 accadere e la data massima oltre la quale esso ritarda gli eventi successivi.",
        "eng": "slack time"
    },
    "51": {
        "id": "criticit\u00e0",
        "voce": "criticit\u00e0",
        "def": "Distanza troppo breve tra attivit\u00e0 dipendenti.",
        "eng": "null"
    },
    "52": {
        "id": "legge_di_Parkinson",
        "voce": "legge di Parkinson",
        "def": "Work expands to fill the time available.",
        "eng": "Parkinson's law"
    },
    "53": {
        "id": "CoCoMo",
        "voce": "CoCoMo (Constructive Cost Model)",
        "def": "Modello per la stima dei costi di un progetto, in tempo\/persona.",
        "eng": "CoCoMo"
    },
    "54": {
        "id": "qualifica",
        "voce": "qualifica",
        "def": "Verifica e validazione ('V&V'), cio\u00e8 quei processi che assicurano la qualit\u00e0 di un prodotto durante il suo ciclo di vita.",
        "eng": "null"
    },
    "57": {
        "id": "rischio",
        "voce": "rischio",
        "def": "Opposto di opportunit\u00e0.",
        "eng": "risk"
    },
    "58": {
        "id": "organizzazione",
        "voce": "organizzazione",
        "def": "Aggregato di persone [?] che agiscono in modo sistematico, disciplinato e quantificabile; contrario di caos.",
        "eng": "organization"
    },
    "59": {
        "id": "caos",
        "voce": "caos",
        "def": "Contrario di organizzazione.",
        "eng": "chaos"
    },
    "60": {
        "id": "budget",
        "voce": "budget",
        "def": "Tempo e denaro a disposizione.",
        "eng": "budget"
    },
    "61": {
        "id": "UML",
        "voce": "UML (Unified Modelling Language)",
        "def": "Famiglia di notazioni grafiche che si basano su un singolo meta-modello e servono a supportare la descrizione e il progetto dei sistemi software.",
        "eng": "UML"
    },
    "62": {
        "id": "SQL",
        "voce": "SQL (Structured Query Language",
        "def": "Linguaggio di programmazione dichiarativo basato sull'algebra relazionale che serve a creare, manipolare e interrogare basi di dati relazionali.",
        "eng": "SQL"
    },
    "63": {
        "id": "scenario",
        "voce": "scenario",
        "def": "Sequenza di passi che descrive un esempio di interazione con un sistema.",
        "eng": "scenario"
    },
    "64": {
        "id": "caso_d_uso",
        "voce": "caso d'uso",
        "def": "Insieme di scenari che hanno in comune un obiettivo per un utente.",
        "eng": "use case"
    },
    "65": {
        "id": "diagramma_dei_casi_d_uso",
        "voce": "diagramma dei casi d'uso",
        "def": "Grafo orientato che mostra gli attori, i casi d'uso e le relazioni tra essi: ogni nodo \u00e8 un attore o un caso d'uso; ogni arco \u00e8 una comunicazione tra un attore e un caso d'uso oppure una relazione (di estensione, inclusione o generalizzazione) tra due casi d'uso o tra due attori.",
        "eng": "use case diagram"
    },
    "67": {
        "id": "marcatore",
        "voce": "marcatore",
        "def": "Istruzione che un programma deve eseguire per trattare nel modo specificato dall'utente una porzione di testo specificata.",
        "eng": "mark-up"
    },
    "68": {
        "id": "sommario",
        "voce": "sommario",
        "def": "Breve riassunto del contenuto di un documento.",
        "eng": "abstract"
    },
    "69": {
        "id": "indice_generale",
        "voce": "indice generale",
        "def": "Elenco delle parti di un documento.",
        "eng": "table of contents"
    },
    "70": {
        "id": "indice_analitico",
        "voce": "indice analitico",
        "def": "Elenco ordinato delle corrispondenze tra particolari termini importanti di un documento e la loro ubicazione in esso.",
        "eng": "index"
    },
    "71": {
        "id": "glossario",
        "voce": "glossario",
        "def": "Elenco dei significati dei termini pi\u00f9 rilevanti di un documento.",
        "eng": "glossary"
    },
    "72": {
        "id": "bibliografia",
        "voce": "bibliografia",
        "def": "Elenco delle fonti di un documento.",
        "eng": "bibliografy"
    },
    "73": {
        "id": "infrastruttura_di_progetto",
        "voce": "infrastruttura (di un progetto)",
        "def": "Tutte le risorse hardware e software del progetto.",
        "eng": "null"
    },
    "74": {
        "id": "modello",
        "voce": "modello",
        "def": "Astrazione della realt\u00e0.",
        "eng": "model"
    },
    "77": {
        "id": "produttivit\u00e0",
        "voce": "produttivit\u00e0",
        "def": "Rapporto tra valore e costo.",
        "eng": "productivity"
    },
    "78": {
        "id": "metodo_di_lavoro",
        "voce": "metodo di lavoro",
        "def": "Metodo di lavoro.",
        "eng": "way of working"
    },
    "79": {
        "id": "configuration_item",
        "voce": "configuration item (CI)",
        "def": "Parte della configurazione di un software.",
        "eng": "configuration item"
    },
    "80": {
        "id": "baseline",
        "voce": "baseline",
        "def": "Nel ciclo di vita di un progetto, punto d'arrivo tecnico dal quale non si retrocede.",
        "eng": "baseline"
    },
    "82": {
        "id": "repository",
        "voce": "repository",
        "def": "Base di dati centralizzata nella quale risiedono, individualmente, tutti i CI di ogni baseline nella loro storia completa.",
        "eng": "repository"
    },
    "83": {
        "id": "ramo_di_repository",
        "voce": "ramo (di un repository)",
        "def": "Insieme di versioni di file sorgente in evoluzione.",
        "eng": "branch"
    },
    "84": {
        "id": "versione_di_CI",
        "voce": "versione (di un CI)",
        "def": "Istanza identificata di un CI nel tempo.",
        "eng": "version"
    },
    "85": {
        "id": "integrazione_continua",
        "voce": "integrazione continua",
        "def": "Pratica di sviluppo in cui i membri di un progetto integrano il loro lavoro frequentemente (quotidianamente) in modo automatizzato.",
        "eng": "continuous integration"
    },
    "86": {
        "id": "regola",
        "voce": "regola",
        "def": "Norma di progetto sottoposta a verifica.",
        "eng": "rule"
    },
    "87": {
        "id": "raccomandazione",
        "voce": "raccomandazione",
        "def": "Norma di progetto suggerita, non sottoposta a verifica.",
        "eng": "recommendation"
    },
    "88": {
        "id": "protocollo",
        "voce": "protocollo",
        "def": "Accordo di interfacce.",
        "eng": "protocol"
    },
    "89": {
        "id": "algoritmo",
        "voce": "algoritmo",
        "def": "Sequenza finita di passi per la risoluzione di un problema.",
        "eng": "algorithm"
    },
    "90": {
        "id": "design_pattern",
        "voce": "design pattern",
        "def": "Soluzione progettuale generale ad un problema ricorrente.",
        "eng": "design pattern"
    },
    "91": {
        "id": "sistema",
        "voce": "sistema",
        "def": "Insieme di componenti organizzati per compiere una o pi\u00f9 funzioni.",
        "eng": "system"
    },
    "96": {
        "id": "requisito_utente",
        "voce": "requisito utente",
        "def": "Richiesta generale, ad alto livello.",
        "eng": "user requirement"
    },
    "97": {
        "id": "requisito_di_sistema",
        "voce": "requisito di sistema",
        "def": "Definizione formale e dettagliata di una funzione del sistema.",
        "eng": "system requirement"
    },
    "98": {
        "id": "requisito_di_prodotto",
        "voce": "requisito di prodotto",
        "def": "Bisogno o vincolo sul prodotto da sviluppare.",
        "eng": "null"
    },
    "99": {
        "id": "requisito_di_processo",
        "voce": "requisito di processo",
        "def": "Vincolo sullo sviluppo del prodotto.",
        "eng": "null"
    },
    "100": {
        "id": "requisito_funzionale",
        "voce": "requisito funzionale",
        "def": "(di un prodotto software) servizio che il prodotto deve fornire.",
        "eng": "functional requirement"
    },
    "101": {
        "id": "requisito_non_funzionale",
        "voce": "requisito non funzionale",
        "def": "(di un prodotto software) vincolo su uno o pi\u00f9 servizi che il prodotto fornisce.",
        "eng": "non-functional requirement"
    },
    "105": {
        "id": "coerenza",
        "voce": "coerenza",
        "def": "L'esser composto da parti che non sono in disaccordo tra loro, cio\u00e8 non affermano cose che si contraddicano.",
        "eng": "consistency"
    },
    "108": {
        "id": "valutazione",
        "voce": "valutazione",
        "def": "Verifica quantificata.",
        "eng": "evaluation"
    },
    "109": {
        "id": "metrica",
        "voce": "metrica",
        "def": "L'interpretazione di un sistema di unit\u00e0 di misura.",
        "eng": "metric"
    },
    "110": {
        "id": "misurazione_quantitativa",
        "voce": "misurazione quantitativa",
        "def": "L'uso di una metrica per assegnare un valore su una scala predefinita.",
        "eng": "quantitative measurement"
    },
    "111": {
        "id": "misura",
        "voce": "misura",
        "def": "Risultato di una misurazione.",
        "eng": "measurement"
    },
    "112": {
        "id": "business_logic",
        "voce": "business logic",
        "def": "La parte di un software che ha a che fare con il dominio applicativo del software; questa parte \u00e8 tipicamente riusabile e quindi condivisa tra diversi software che operano nello stesso dominio.",
        "eng": "business logic"
    },
    "113": {
        "id": "application_logic",
        "voce": "application logic",
        "def": "La parte di un software che \u00e8 specifica di quel software e non \u00e8 intesa per essere riusata in altri software.",
        "eng": "application logic"
    },
    "117": {
        "id": "test",
        "voce": "test",
        "def": "Attivit\u00e0 di analisi dinamica che osserva i risultati dell'esecuzione di un sistema (o parte di esso) sotto determinate condizioni.",
        "eng": "test"
    },
    "121": {
        "id": "test_di_validazione",
        "voce": "test di validazione",
        "def": "Test che verifica il soddisfacimento del capitolato d'appalto da parte del sistema in esame.",
        "eng": "validation test"
    },
    "122": {
        "id": "test_strutturale",
        "voce": "test strutturale",
        "def": "Test di unit\u00e0 che analizza soltanto il comportamento dell'unit\u00e0 e non la sua logica interna.",
        "eng": "structural test"
    },
    "123": {
        "id": "test_funzionale",
        "voce": "test funzionale",
        "def": "Test di unit\u00e0 che analizza la logica interna del codice di un'unit\u00e0.",
        "eng": "functional test"
    },
    "124": {
        "id": "guasto",
        "voce": "guasto",
        "def": "Causa di un errore.",
        "eng": "fault"
    },
    "125": {
        "id": "errore",
        "voce": "errore",
        "def": "Stato del sistema che, se attivato, produce un malfunzionamento.",
        "eng": "error"
    },
    "126": {
        "id": "malfunzionamento",
        "voce": "malfunzionamento",
        "def": "Esecuzione di un software difforme dalle attese.",
        "eng": "failure"
    },
    "129": {
        "id": "caso_di_prova",
        "voce": "caso di prova",
        "def": "Terna di valori (input, output, ambiente) che specifica il comportamento che un sistema (o parte di esso) deve avere in un caso specifico.",
        "eng": "test case"
    },
    "130": {
        "id": "batteria_di_prove",
        "voce": "batteria di prove",
        "def": "Insieme di casi di prova.",
        "eng": "test suite"
    },
    "131": {
        "id": "rendimento_decrescente",
        "voce": "rendimento decrescente, legge del",
        "def": "Man mano che si aumenta lo sforzo, il rendimento cresce inizialmente ma poi diminuisce sempre pi\u00f9.",
        "eng": "diminishing returns"
    },
    "132": {
        "id": "copertura_del_codice",
        "voce": "copertura del codice",
        "def": "Percentuale di codice sorgente eseguito durante un caso di prova.",
        "eng": "code coverage"
    },
    "133": {
        "id": "complessit\u00e0_ciclomatica",
        "voce": "complessit\u00e0 ciclomatica",
        "def": "Misura quantitativa del numero di cammini linearmente indipendenti che il codice sorgente di un programma pu\u00f2 percorrere.",
        "eng": "cyclomatic complexity"
    },
    "135": {
        "id": "ISO 9000",
        "voce": "ISO 9000",
        "def": "Famiglia di standard internazionali per la gestione della qualit\u00e0 nei sistemi produttivi.",
        "eng": "ISO 9000"
    },
    "139": {
        "id": "SPICE",
        "voce": "SPICE",
        "def": "Software Process Improvement Capability dEtermination, vedi ISO\/IEC 15504.",
        "eng": "SPICE"
    },
    "143": {
        "id": "ISO_IEC 15939",
        "voce": "ISO\/IEC 15939",
        "def": "Standard internazionale per la misurazione del software.",
        "eng": "ISO\/IEC 15939"
    },
    "144": {
        "id": "prodotto_software",
        "voce": "prodotto software",
        "def": "Su commessa: forma, contenuto e funzione fissate dal cliente;\r\nPacchetto: forma, contenuto e funzione idonee alla replicazione;\r\nComponente: forma, contenuto e funzione adatte alla composizione;\r\nServizio: forma, contenuto e funzione fissate dal problema.",
        "eng": "software product"
    },
    "145": {
        "id": "manutenzione",
        "voce": "manutenzione",
        "def": "Correttiva: per correggere difetti eventualmente rilevati\r\nAdattativa: per adattare il sistema alla variazione dei requisiti;\r\nEvolutiva: per aggiungere funzionalit\u00e0 al sistema",
        "eng": "maintenance, upkeep"
    },
    "146": {
        "id": "efficienza",
        "voce": "efficienza",
        "def": "Contenimento dei consumi per raggiungere un obiettivo. Inversamente proporzionale alla quantit\u00e0 di risorse impiegate nell\u2019esecuzione delle attivit\u00e0 richieste.",
        "eng": "efficiency"
    },
    "147": {
        "id": "efficacia",
        "voce": "efficacia",
        "def": "Conformit\u00e0 alle attese. Determinata dal grado di conformit\u00e0 del prodotto rispetto alle norme vigenti e agli obiettivi prefissati.",
        "eng": "effectiveness"
    },
    "148": {
        "id": "people",
        "voce": "People",
        "def": "Business management; Project management; Development team; Customers; End users",
        "eng": "People"
    },
    "149": {
        "id": "business_management",
        "voce": "Business management",
        "def": "Chi fissa gli obiettivi in termini di costi, profitto, priorit\u00e0 strategiche",
        "eng": "Business management"
    },
    "150": {
        "id": "Project_management",
        "voce": "Project management",
        "def": "Chi gestisce le risorse di progetto e riferisce all\u2019organizzazione e al\r\ncliente",
        "eng": "Project management"
    },
    "151": {
        "id": "development_team",
        "voce": "Development team",
        "def": "Chi realizza il prodotto: il luogo di appartenenza dei software engineer",
        "eng": "Development team"
    },
    "152": {
        "id": "Customers",
        "voce": "Customers",
        "def": "Chi compra il prodotto",
        "eng": "Customers"
    },
    "153": {
        "id": "end users",
        "voce": "",
        "def": "",
        "eng": ""
    },
    "154": {
        "id": "end_users",
        "voce": "End users",
        "def": "Chi usa il prodotto software",
        "eng": "End users"
    },
    "155": {
        "id": "software_engineer",
        "voce": "Software engineer",
        "def": "Realizza parte di un sistema complesso con la consapevolezza che potr\u00e0 essere usato, completato e modificato da altri. Deve guardare e comprendere il quadro generale nel quale il sistema cui contribuisce si colloca.\r\nDeve operare compromessi intelligenti e lungimiranti tra visioni e spinte contrapposte.",
        "eng": "Software engineer"
    },
    "156": {
        "id": "progetto",
        "voce": "progetto",
        "def": "Nasce da una richiesta (e\/o pagamento) che diventa poi un impegno se accettato. Porta dei vincoli : di costo, di risorse, di tempo. Spesso insieme di attivit\u00e0 da svolgere in modo collaborativo.\r\nPianificazione; Analisi dei requisiti; Progettazione; Realizzazione; Verifica e validazione; Manutenzione.",
        "eng": "project"
    },
    "157": {
        "id": "processo",
        "voce": "processo (ingegneristico)",
        "def": "Insieme di attivit\u00e0 correlate e coese che trasformano ingressi in uscite, consumando risorse nel farlo.\r\nIl quadro metodologico, normativo e strategico delle attivit\u00e0 di progetto (insieme delle attivit\u00e0 raggruppate per obiettivi) per alimentare svariati modelli di ciclo di vita del SW.",
        "eng": "process"
    },
    "158": {
        "id": "processo_definito",
        "voce": "processo definito",
        "def": "Specializzazione del processo standard necessaria per adattarlo ad esigenze specifiche di progetto.",
        "eng": ""
    },
    "159": {
        "id": "processo_di_progetto",
        "voce": "processo di progetto",
        "def": "Istanza di un processo definito che utilizza risorse aziendali per raggiungere obiettivi prefissati (processo calato nella realt\u00e0 aziendale).",
        "eng": ""
    },
    "160": {
        "id": "modelli_di_ciclo_di_vita",
        "voce": "Modelli di ciclo di vita",
        "def": "Descrivono come i processi si relazionano tra loro nel tempo rispetto agli stati di ciclo di vita.\r\nBase concettuale intorno alla quale pianificare, organizzare, eseguire e controllare lo svolgimento delle attivit\u00e0 necessarie.",
        "eng": "Life cycle models"
    },
    "163": {
        "id": "prototipo",
        "voce": "Prototipo",
        "def": "Serve per provare e scegliere soluzioni.\r\nPu\u00f2 essere \u201cusa e getta\u201d (nel caso delle iterazioni) oppure fornire stati\r\ndi incremento (baseline).",
        "eng": "Prototype"
    },
    "165": {
        "id": "ISO_IEC 12207",
        "voce": "ISO\/IEC 12207",
        "def": "Standard internazionale per il ciclo di vita del software.\r\nModello ad alto livello.\r\n - identifica i processi dello sviluppo SW; \r\n - struttura modulare che richiede specializzazione\r\n - specifica le responsabilit\u00e0 sui processi\r\n - identifica i prodotti dei processi",
        "eng": "ISO\/IEC 12207"
    },
    "166": {
        "id": "processi_primari",
        "voce": "Processi Primari (ISO 12207)",
        "def": "Acquisizione (gestione dei propri sotto-fornitori);\r\nFornitura (gestione rapporti con cliente); \r\nSviluppo;\r\nGestione Operativa (utilizzo);\r\nManutenzione (correttiva\/adattativa\/evolutiva)",
        "eng": "Primary processes"
    },
    "167": {
        "id": "processi_di_sviluppo",
        "voce": "Processi di Sviluppo (ISO 12207)",
        "def": "Documentazione;\r\nAccertamento della qualit\u00e0;\r\nGestione delle versioni e delle configurazioni;\r\nVerifica;\r\nQualifica;\r\nValidazione;\r\nRevisioni congiunte con il cliente;\r\nVerifiche ispettive interne;\r\nRisoluzione dei problemi.",
        "eng": "Development processes"
    },
    "168": {
        "id": "processi_organizzativi",
        "voce": "Processi organizzativi (ISO 12207)",
        "def": "Gestione dei processi;\r\nGestione delle infrastrutture;\r\nMiglioramento del processo;\r\nFormazione del personale.",
        "eng": ""
    },
    "170": {
        "id": "modello_sequenziale",
        "voce": "Modello sequenziale (a cascata)",
        "def": "Centrato sull'idea di processi ripetibili; Successione di fasi rigidamente sequenziali: non ammette ritorni a fasi precedenti ed eventi eccezionali fanno ripartire dall'inizio. I prodotti sono principamente documenti, fino ad includere il SW (Document driven development). Ogni stato di vita ha pre- e post-condizioni.\r\nFasi distinte e non sovrapposte nel tempo. Sviluppo di sistemi complessi sul piano organizzativo (iterazioni troppo costose per mitigare i rischi con approssimazioni successive).\r\nFase definita in termini d'attivit\u00e0 previste & prodotti attesi, contenuti e struttura documenti, responsabilit\u00e0 e ruoli coinvolti + scadenze consegne docs.\r\nFasi = durate temporali con dipendenze causali tra loro.\r\nDifetti: eccessivamente rigido (stretta sequenzialit\u00e0 + non modifiche in corso d'op. + molta manutenzione + molto burocratico e poco realistico).\r\nCorrettivi: 1. Prototipazione (usa&getta); 2. Cascata con ritorni",
        "eng": "Waterfall model"
    },
    "174": {
        "id": "modello_incrementale",
        "voce": "Modello incrementale \/ incremento",
        "def": "Procedere per incrementi significa aggiungere a un impianto base.\r\nPossono produrre \"valore\" ad ogni incremento; ogni incremento riduce il rischio di fallimento; funzionalit\u00e0 essenziali sviluppate nei primi incrementi.\r\nPrevede rilasci multipli & successivi: ognuno realizza un incremento di funzionalit\u00e0. Requisiti utente classificati e trattati in base alla loro importanza strategica (primi rilasci->req. + importanti; requisiti strategici stabiliti all'inizio) (req. principali identificati e fissati; architettura del sistema identificata e fissata completamente).\r\nAnalisi e progettazione architetturale non ripetute. Realizzazione incrementale (prj dettaglio, codifica e prove; prima req. essenziale e poi i desiderabili; integrazione->collaudo->rilascio)",
        "eng": "Incremental model \/ Increment"
    },
    "175": {
        "id": "modello_iterativo",
        "voce": "Modello iterativo \/ iterazione",
        "def": "Procedere per iterazioni significa operare raffinamenti o rivisitazioni.\r\nApplicabili a qualunque modello di ciclo di vita; consentono maggior capacit\u00e0 d'adattamento; comportano il rischio di non convergenza.\r\nSoluzione generale:\r\n 1.decomporre la realizzazione del sys\r\n 2.identificare&trattare prima le componenti pi\u00f9 critiche\r\n 3.limitare superiormente il numero d'iterazioni.\r\nRischi: ogni iterazione comporta un ritorno all'indietro, nella direzione opporsta all'avanzamento del tempo).",
        "eng": "Iterative model \/ iteration"
    },
    "176": {
        "id": "modello_evolutivo",
        "voce": "Modello evolutivo",
        "def": "Aiuta a riposndere a bisogni non preventivabili inizialmente; pu\u00f2 richiedere rilascio e mantenimento di pi\u00f9 versioni esterne in parallelo; comporta il riattraversamento di pi\u00f9 fasi del ciclo di vita.\r\n1.Analisi preliminare (identificare req. di massima; definire architattura di massima; pianificare i passi d'analisi e realizzazione evolutiva)\r\n2. Analisi&realizzazione d'una evoluzione (come raffinamento + estensione dell'analisi o per progettazione, codifica, prove ed integrazione)\r\n3. Rilascio di prototipi, poi accettazione finale.",
        "eng": "Evolutive model"
    },
    "177": {
        "id": "modello_spirale",
        "voce": "Modello a spirale",
        "def": "Miglior controllo dei rischi di progetto; cicli interni rapidi e ripetuti (dedicati ad analisi e sviluppi prototipali), cicli esterni che aderiscono ad un qualunque altro modello standard di ciclo di vita.\r\nGrande attenzione sugli aspetti gestionali (pianificazione delle fasi, analisi dei rischi (risk-driven).\r\n1.Definizione degli obiettivi (requisiti, rischi, strategia di gestione)\r\n2.Analisi dei rischi (studio delle conseguenze, valutazione alternative)\r\n3.Sviluppo e validazione (realizzazione del prodotto)\r\n4.Pianificazione (decisione circa il proseguimento, pianificazione del proseguimento)",
        "eng": "Spiral model"
    },
    "178": {
        "id": "modello_componenti",
        "voce": "Modello a componenti",
        "def": "Molto di quello che serve \u00e8 gi\u00e0 stato fatto & molto di quello che faremo potr\u00e0 ancora servire.\r\nMassima attenzione al riuso sistematico di componenti preesistenti\/off-the-shelf.\r\nAnalisi requisiti -> Analisi componenti -> Adattamento requisiti -> Progettazione con riuso -> Sviluppo ed integrazione -> Validazione di sistema",
        "eng": "Model at component"
    },
    "179": {
        "id": "metodi_agili",
        "voce": "Metodi agili",
        "def": "> 4 principi fondamentali:\r\n1.Individuals and interactions over processes and tools (L\u2019eccessiva rigidit\u00e0 ostacola l\u2019emergere del valore)\r\n2. Working sofware over comprehensive documentation \r\n3. Customer collaboration over contract negotiation\r\n4. Responding to change over following a plan\r\nL'idea di base \u00e8 il concetto di \"user story\" (compito significativo che l'utente vuole svolgere con il sw richiesto; definita da: documento di descrizione, minuta di converszioni con il cliente per fissare la comprensione comune, strategia da utilizzare per confermare che il sw soddisfi gli obiettivi).\r\nScrum (caos organizzato), Kanban (just-in-time), Scrumban\r\n",
        "eng": "Agile methods"
    },
    "180": {
        "id": "ruolo",
        "voce": "Ruolo",
        "def": "Funzione aziendale assegnata a progetto; identifica capacit\u00e0 e compiti.\r\nEs. Sviluppo -> responsabilit\u00e0 tecnica e realizzativa.",
        "eng": "role"
    },
    "181": {
        "id": "profilo_professionale",
        "voce": "profilo professionale",
        "def": "Requisiti per l'assunzione di un ruolo in un progetto; insieme di competenze (tecnologiche e metodologiche) e un'esperienza (espressa in anni e partecipazione a progetti) che fanno da requisiti per l'assunzione di un ruolo in un progetto.",
        "eng": "professional profile"
    },
    "182": {
        "id": "diagramma_di_Gantt",
        "voce": "diagramma di Gantt",
        "def": "Diagramma che rappresenta la durata, la sequenzialit\u00e0 e il parallelismo delle attivit\u00e0 di un progetto.\r\nSi basa sulla dislocazione temporale delle attivit\u00e0, per rappresentarne la durata, la sequenzialit\u00e0 ed il parallelismo e confrontare stime e progressi.",
        "eng": "Gantt diagram"
    },
    "183": {
        "id": "pianificazione_progetto",
        "voce": "Pianificazione di progetto",
        "def": ">Definizione delle attivit\u00e0\r\n  [pianificarne lo svolgimento + controllarne l'attuzione; avere una base su cui gestire l'allocazione delle risorse; stimare e controllare scadenze e costi]\r\n> Strumenti di pianificazione: diagr. Gantt, Programme Evaluation and Review Technique (PERT), Work Breakdown Structure (WBS)",
        "eng": "Project pianification"
    },
    "184": {
        "id": "diagramma_WBS",
        "voce": "diagramma WBS (Work Breakdown Structure)",
        "def": "Diagramma che decompone in modo gerarchico le attivit\u00e0 di un progetto in sotto-attivit\u00e0 (coese ma non necessariamente sequenziali ed univocamente identificate).",
        "eng": "WBS diagram"
    },
    "185": {
        "id": "piano_di_progetto",
        "voce": "Piano di progetto",
        "def": "Fissa: risorse disponibili, suddivisione attivit\u00e0, calendario attivit\u00e0.\r\nObiettivi: org. att. in modo da produrre ris. utili per valutare con efficacia il piano d'avanzamento del lavoro + fissare milestone come punti critici\/finali delle attivit\u00e0.\r\nStruttura: Introduzione, org. prj, analisi dei rischi, risorse necessarie e disponibili (hw, sw), suddivisione del lavoro (work breakdown structure). calendario delle attivit\u00e0 (prj schedule), meccanismi di controllo e rendicontazione)",
        "eng": ""
    },
    "186": {
        "id": "piano_di_progetto",
        "voce": "Piano di progetto",
        "def": "Fissa: risorse disponibili, suddivisione attivit\u00e0, calendario attivit\u00e0.\r\nObiettivi: org. att. in modo da produrre ris. utili per valutare con efficacia il piano d'avanzamento del lavoro + fissare milestone come punti critici\/finali delle attivit\u00e0.\r\nStruttura: Introduzione, org. prj, analisi dei rischi, risorse necessarie e disponibili (hw, sw), suddivisione del lavoro (work breakdown structure). calendario delle attivit\u00e0 (prj schedule), meccanismi di controllo e rendicontazione)",
        "eng": ""
    },
    "189": {
        "id": "gestione_rischi",
        "voce": "Gestione dei rischi",
        "def": "Durante la pianificazione del progetto:\r\n>Identificazione (nel progetto, prodotto, mercato)\r\n>Analisi (prob. d'occorrenza, conseguenze)\r\n>Pianificazione (valutare come evitarli\/mitigarli, conseguenze?)\r\nDurante il progetto:\r\n>Controllo e mitigazione (attenzione continua del livello, tramite rilevazione d'indicatori; riconosciemnto, trattamento ad aggiornamento strategie).\r\nFonti: tecnologie, rapporti int.pers., org. lavoro, requisiti+rapporti stakeholders, tempi e costi\r\nVerifica livello di rischio: \r\n>da effettuare regolarmente per determinare il livello corrente di rischio (non sempre \u00e8 costante)\r\n>valutare se gli effetti dei rischi possono essere cambiati (non sono sempre costati nel tempo)\r\n>riportare sempre ogni rischio serio all'attenzione del mgmt",
        "eng": "Risk management"
    },
    "190": {
        "id": "servizio",
        "voce": "Servizio (amministrazione di progetto)",
        "def": "Mezzo per aiutare l'utente a raggiungere i suoi obiettivi riducendo costi e rischi.",
        "eng": "Service"
    },
    "192": {
        "id": "amministratore_di_progetto",
        "voce": "amministratore di progetto (profilo professionale)",
        "def": "Chi controlla che ad ogni istante della vita del progetto le risorse (umane, materiali, economiche e strutturali) siano presenti e operanti; inoltre, gestisce la documentazione e controlla il versionamento e la configurazione.\r\nNon compie scelte gestionali ma attua le scelte tecnologiche concordate coi responsabili aziendali e del progetto",
        "eng": "project administrator"
    },
    "193": {
        "id": "documentazione",
        "voce": "documentazione",
        "def": "Tutto ci\u00f2 che descrive gli ingressi e le uscite delle attivit\u00e0 di un progetto (riguardo al prodotto e processo). Documenti di sviluppo e di gestione del progetto.",
        "eng": "documentation"
    },
    "194": {
        "id": "amministrare_progetto",
        "voce": "Amministrare un progetto",
        "def": "Equipaggiare, organizzare e gestire l\u2019ambiente di lavoro e di produzione (regole+procedure+strumenti&servizi; supporto di tutti i processi istanziati nel prj).\r\nLe attivt\u00e0 sono: la redazione e la manutenzione di regole e procedure di lavoro, il reperimento, l'organizzazione, la gestione e la manutenzione di risorse informatiche per l'erogazione dei servizi di supporto.",
        "eng": "Project administration"
    },
    "195": {
        "id": "ambiente_di_lavoro",
        "voce": "ambiente di lavoro",
        "def": "L'insieme di persone, di ruoli, di procedure e l'infrastruttura la cui qualit\u00e0 determina la produttivit\u00e0 del progetto.\r\nDeve essere: completo, ordinato, aggiornato.",
        "eng": "work environment"
    },
    "196": {
        "id": "configurazione",
        "voce": "configurazione",
        "def": "Di quali parti si compone un prodotto e il modo in cui esse stanno assieme.\r\nUn prodotto sw \u00e8 l'unione di parti distine unite insieme secondo regole rigorose. Le regole di configurazione vanno pianificate e la gestione di configurazione va automatizzata.",
        "eng": "configuration"
    },
    "197": {
        "id": "gestione_configurazione",
        "voce": "Gestione di configurazione",
        "def": "Ha come obiettivi quello di mettere in sicurezza le baseline che consolidano gli stati d'avanzamento del processo di sviluppo.\r\nLe attivit\u00e0 sono: l'identificazione di configurazione (quali configuration item compongono il prodotto->oguno ha un'identit\u00e0 unica) , il controllo di baseline (insieme di CI consolidato ad una specifica milestone; l'esistenza di baseline ben identificate permette riproducibilit\u00e0, tracciabilit\u00e0, analisi e confronto), la gestione delle modifiche ed il controllo di versione. \r\n",
        "eng": "Configuration management"
    },
    "198": {
        "id": "milestone",
        "voce": "milestone",
        "def": "Punto nel tempo associato ad un valore strategico.\r\nDevono essere: specifiche per obiettivi, delimitate per ampiezza ed ambizioni, incrementali per contenuti, coerenti con e rilevante per la strategia di prodotto, misurabili epr quantit\u00e0 di impegno necessario, traducibili in compiti assegnabili, raggiungibili, puntuali rispetto alle esigenze di calendario e dimostrabili agli stakeholders",
        "eng": "milestone"
    },
    "199": {
        "id": "gestione_della_qualit\u00e0",
        "voce": "Gestione della qualit\u00e0",
        "def": "L'insieme dei processi che assicurano che prodotti e implementazioni di processi rispettino gli obiettivi di qualit\u00e0 (di un'organizzazione) e soddisfino gli stakeholder.",
        "eng": "quality management"
    },
    "200": {
        "id": "gestione_modifiche",
        "voce": "Gestione delle modifiche",
        "def": "Le richieste hanno origine da: utenti(difetti\/mancanze), sviluppatori (idem), competizione (per avere valore aggiunto).\r\nLe richieste vanno sottoposte ad un processo d'analisi, decisione, realizzazione e verifica.\r\nOgni richiesta va inoltrata in modo formale: change request. \r\nVa tenuta traccia d'ogni richiesta: issue tracking o ticketing, stato corrente + eventuale chiusura.",
        "eng": ""
    },
    "201": {
        "id": "norme_progetto",
        "voce": "Norme di progetto",
        "def": "Linee guida per le attivit\u00e0 di sviluppo: strumento operativo di complemento alle procedure.\r\nContenuti: organizzazione ed uso delle risorse di sviluppo, convenzioni sull'uso degli strumenti di sviluppo, organizzazione delle comunicazioni e della cooperazione, norme di codifica e gestione dei cambiamenti",
        "eng": ""
    },
    "202": {
        "id": "requisito",
        "voce": "requisito",
        "def": "Bisogno da soddisfare o vincolo da rispettare.\r\nSecondo IEEE:\r\n1. Condizione (capability) necessaria ad un utente per risolvere un problema o raggiungere un obiettivo (visione dal lato del bisogno)\r\n2. Condizione (capability) che dev'essere soddisfatta o posseduta da un sistema per adempiere ad un obbligo (visione lato soluzione)\r\n3. Descrizione documentata di una condizione (capability) come in 1 o 2.",
        "eng": "requirement"
    },
    "205": {
        "id": "piano_qualifica",
        "voce": "Piano di qualifica",
        "def": "Definizione delle strategie di verifica; scelta dei metodi, tecniche e procedure da usare per la validazione",
        "eng": ""
    },
    "206": {
        "id": "studio_fattibilit\u00e0",
        "voce": "Studio di fattibilit\u00e0",
        "def": "Valuta rischi, costi, benefici, nell'ottica del cliente e del fornitore; decidere se procedere (obiettivo=restare entro un costo massimo prefissato); gatto con le conoscenze immediatamente disponibili, non richiede ricerche impegnative.\r\nFattibilit\u00e0 tecnico-organizzativa (strumenti per la realiz., sol. alg. e arch., piattaforme idonee per l'esecuzione).\r\nRapporto costi-benefici; individuazione dei rischi (complessit\u00e0, incertezze).\r\nValutazione scadenze temporali; valutazione delle alternative (scelte architetturali, strategie relizzative:make-or-buy, strategie operative).",
        "eng": ""
    },
    "207": {
        "id": "attributi_prodotto",
        "voce": "Attributi di prodotto (requisiti)",
        "def": "Definiscono le caratteristiche richieste al sistema (cosa devo fare?).\r\nRequisiti funzionali, prestazionali, di qualit\u00e0 (di prodotto).",
        "eng": ""
    },
    "208": {
        "id": "attributi_processo",
        "voce": "Attributi di processo (requisiti)",
        "def": "Pongono vincoli sui processi impiegati nel prodotto (come devo farlo?).\r\nRequisiti di vincolo (realizzativo, normativo, contrattuale).",
        "eng": ""
    },
    "209": {
        "id": "classificazione_requisiti",
        "voce": "Classificazione dei requisiti",
        "def": "Requisiti di progetto, processo e sistema-> funzionali, di performance, di qualit\u00e0.\r\nI requisiti devono essere verificabili; chi ne fissa uno deve avere idea di come accertarne il soddisfacimento.\r\n>Requisiti formali prevedono test, dimostrazione formale e revisione;\r\n>Requisiti prestazionali, una misurazione\r\n>Requisiti qualitativi, una verifica ad hoc\r\n>Requisiti dichiarativi, una revisione.\r\nI requisiti hanno una diversa utilit\u00e0 strategica:\r\n>Obbligatori: irrinunciabili per qualsiasi stakeholder;\r\n>Desiderabili, non sono strettamente necessari ma hanno un valore aggiunto riconoscibile;\r\n>Opzionali, sono relativamente utili oppure contrattabili in seguito.",
        "eng": ""
    },
    "210": {
        "id": "IEEE_830-1998",
        "voce": "IEEE 830-1998",
        "def": "Reccomended Practice for Software Requirements Specifications.\r\nLa specifica dei requisiti dev'avere 8 qualit\u00e0 essenziali:\r\n1. Privia d'ambiguit\u00e0 (UNAMBIGUOS);\r\n2. Corretta\r\n3. Completa\r\n4. Verificabile\r\n5. Consistente\r\n6. Modificabile\r\n7. Tracciabile\r\n8. Ordinata per rilevanza",
        "eng": "IEEE 830-1998"
    },
    "211": {
        "id": "verifica_requisiti",
        "voce": "Verifica dei requisiti",
        "def": "Viene eseguita su un documento organizzato, tramite Walkthrough od Ispezione (lettura mirata e strutturata).\r\nViene creata una matrice delle dipendenze al fine del tracciamento.\r\n>La chiarezza espressiva \u00e8 importante: l'uso naturale del linguaggio rende difficile coniugare chiarezza con facilit\u00e0 di lettura.\r\n>La chiarezza strutturale \u00e8 utile a separare requisiti funzionali e non funzionali, occorre una classificazione precisa, uniforme ed accurata.\r\n>Atomicit\u00e0 ed aggregazione significa avere requisiti elementari e correlazioni chiare ed esplicite.\r\n",
        "eng": ""
    },
    "212": {
        "id": "SEMAT",
        "voce": "SEMAT",
        "def": "SEMAT (Software Engineering Method and Theory) drives a process to refound software engineering based on a solid theory, proven principles and best practices.\r\nIs a community of people, companies and some universities, supporting an initiative to create a common ground, a kernel or a foundation for software engineering.",
        "eng": "SEMAT"
    },
    "215": {
        "id": "progettazione",
        "voce": "progettazione",
        "def": "Definizione dell'architettura, delle componenti, delle interfacce e delle altre caratteristiche di un sistema o componente.\r\nPrecede la produzione; costruizione a priori, perseguendo la correttezza per costruzione (non per correzione).\r\n->Fare una cosa che \u00e8 garantito abbia le propriet\u00e0 dichiarate.\r\nScopo:\r\n>soddisfare i requisiti con un sistema di qualit\u00e0;\r\n>definire l'architettura logica del prodotto;\r\n>dominare la complessit\u00e0 del prodotto (divide-et-impera, facilita la comprensione ed assegnare la codifica ad un solo individuo)\r\n>organizzare e ripartire le responsabilit\u00e0 di realizzazione\r\n>produrre in economia (efficienza)\r\n>garantire la qualit\u00e0 (efficacia).\r\nRisponde alla domanda: \"come dare la giusta risposta (al problema)?\"\r\nDescrive una soluzione soddisfacente per tutti gli stakeholders; approccio sintetico, il codice non esiste ancora; produce l'architettura scelta ed i suoi modelli logici.",
        "eng": "design"
    },
    "216": {
        "id": "architettura",
        "voce": "architettura",
        "def": "Decomposizione di un sistema in componenti; l'organizzazione di tali componenti, le interfacce necessarie all'interazione tra queste e l'ambiente ed i paradigmi di composizione delle componenti.\r\nLa struttura organizzativa di un sistema o componente.",
        "eng": "architecture"
    },
    "217": {
        "id": "allocazione_di_risorse",
        "voce": "allocazione di risorse (per un progetto)",
        "def": "Assegnare attivit\u00e0 a ruoli e, poi, ruoli a persone.",
        "eng": ""
    },
    "219": {
        "id": "incapsulazione",
        "voce": "Incapsulazione (information hiding)",
        "def": "Le componenti sono \"black box\" ed i clienti ne conoscono solo l'interfaccia; la specifica nasconde gli algoritmi e le strutture dati usate al loro interno. I benefici sono che l'esterno non pu\u00f2 fare assunzioni sull'interno, cresce la manutenibilit\u00e0, diminuendo le dipendenze aumentano le opportunit\u00e0 di riuso.",
        "eng": "Information hiding"
    },
    "220": {
        "id": "coesione",
        "voce": "coesione",
        "def": "Grado di relazione tra parti associate di un sistema che concorrono agli stessi obiettivi. Propriet\u00e0 interna di singole componenti: funzionalit\u00e0 \"vicine\" devono stare nella stessa componente (la modularit\u00e0 spinge a decomporre il grande in piccolo; aiuta a decomporre ed a porre un limite inferiore alla decomposizione).\r\nPorta ad una maggiore manutenibilit\u00e0 e riusabilit\u00e0, minore dipendenza fra i componenti ed una maggiore comprensione dell'architettura del sistema.\r\n>Funzionale, quando parti specifiche concorrono al medesimo compito\r\n>Sequenziale, quando alcune azioni sono vicine ad altre per ordine di esecuzione, cos\u00ec conviene metterle insieme\r\n>Informativa, quando le parti agiscono sulla stessa unit\u00e0 d'informazione.",
        "eng": "cohesion"
    },
    "221": {
        "id": "accoppiamento",
        "voce": "accoppiamento",
        "def": "Grado di dipendenza tra le varie componenti di un sistema.\r\nC'\u00e8 interdipendenza cattiva tra parti diverse se:\r\n-si fanno assunzioni dall'esterno su come le parti facciano il loro mestiere all'interno (variabili, locazioni, tipi)\r\n-s'impongono vincoli dall'esterno sull'interno di una parte (ordine d'azioni, uso di dati\/formati\/valori)\r\n-si condividono frammenti delle stesse risorse (strutture dati)\r\nUn sistema \u00e8 un insieme organizzato, ha quindi bisogno d'un po' d'accoppiamento e la buona progettazione lo tiene basso.\r\n\u00c8 una propriet\u00e0 esterna delle componenti: dato U il grado d'utilizzo reciproco di M componenti, il massimo accoppiamento si ha per U=M*M; nullo quando U=0;\r\nLe metriche sono il Fan-in e Fan-out strutturale.\r\nUna buona progettazione produce componenti con Fan-in elevato.",
        "eng": "coupling"
    },
    "222": {
        "id": "faf-in",
        "voce": "Fan-in",
        "def": "\u00c8 l'indice di utilit\u00e0 di una componente. Rappresenta il numero dei moduli immediatamente superiori (parenti o boss).\r\nIl designer dovrebbe mirare ad un lato fan-in ai livelli inferiori della gerarchia. Normalmente ci sono funzioni low-level che devono essere identificate e trasformate in moduli comuni per redurre la ridondanza del codice e aumentare la manutenibilit\u00e0. Un alto fan-in aumenta la portabilit\u00e0 se tutta la gestione dell'I\/O viene fatta da moduli comuni. Aumenta la ridondanza, semplifica la manutenzione. Moduli sviluppati per il fan-in devon'avere buona coesione, preferibilmente funzionale.\r\nOgni intergavvia per un modulo fan-in deve avere lo stesso numero e tipo di parametri.",
        "eng": "Fan-in"
    },
    "223": {
        "id": "fan-out",
        "voce": "Fan-out",
        "def": "Rappresenta il numero di dipendenze di un modulo (il numero di moduli immediatamente subordinati).\r\nIl fan-out ottimale \u00e8 tra 5 e 9. \r\nIl designer dovrebbe mirare ad un fan-out moderato ai livelli alti della gerarchia, usando la fattorizzazione per risolvere problemi dovuti ad un'eccessivo fan.out, creando moduli intermedi per fattorizzare al di fuori i moduli con un'alta coesione ed un basso accoppiamento.",
        "eng": "Fan-out"
    },
    "224": {
        "id": "riuso",
        "voce": "Riuso",
        "def": "Occasionale (opportunistico) \u2013 \u00abcopia-incolla\u00bb a basso costo e scarso\r\nimpatto.\r\nSistematico (per progetto, per prodotto, per azienda) a maggior costo\r\nma maggior impatto.\r\nMira a capitalizzare sottoinsiemi gi\u00e0 esistenti, impiegandoli pi\u00f9 volte per pi\u00f9 prodotti, ottenendo un minor costo realizzativo e di verifica. Ma progettare per riuso \u00e8 pi\u00f9 difficile, visto che si deve anticipare i bisogni futuri; in pi\u00f9 non \u00e8 immediato, visto che si devono minimizzare le modifiche alle componenti riusate per non perderne il valore.\r\nCostituisce -nel breve periodo- un puro costo. Diventa risparmio nel medio termine (\u00e8 quindi un investimento).",
        "eng": "Reuse"
    },
    "225": {
        "id": "framework",
        "voce": "framework",
        "def": "Struttura di supporto su cui un software pu\u00f2 essere organizzato e progettato.\r\nInsieme integrato di componenti software prefabbricate.\r\nSono bottom-up perch\u00e8 fatti di codice gi\u00e0 sviluppato, ma anche top-down se impongono uno stile architetturale.\r\nUtilissimi come base facilmente risuabile di diverse applicazioni entro un dato dominio.",
        "eng": "framework"
    },
    "226": {
        "id": "progettazione_di_dettaglio",
        "voce": "progettazione di dettaglio",
        "def": "Definizione del comportamento delle componenti di un sistema, con un livello di dettaglio tale per cui le componenti possano essere implementate.\r\nDefinizione delle unit\u00e0 realizzative (moduli), specifica delle unit\u00e0 come insieme di moduli (definizione delle caratteristiche significative; fatta dal nulla o tramite specializazione di componenti esistenti).\r\nHa come obiettici di:\r\n>Assegnare unit\u00e0 a componenti\r\n>Produrre la documentazione necessaria\r\n>Definire gli strumenti per le prove di unit\u00e0",
        "eng": "detailed design"
    },
    "227": {
        "id": "stati_progresso_SEMAT",
        "voce": "Stati di processo per SEMAT",
        "def": ">Conceived (committente identificato; gli stakeholders vedono sufficienti opportunit\u00e0 per il progetto)\r\n>Bounded (i macro bisogni sono chiari, i meccanismi di gestione dei requisiti sono fissati)\r\n>Coherent (requisiti classificati e quelli essenziali\/obbligatori sono chiari e ben definiti)\r\n>Acceptable (requisiti fissati definiscono un sys sufficiente agli stakeholders)\r\n>Addressed (il prodotto soddisfa i principali requisiti al punto da poter meritare rilascio ed uso)\r\n>Fullfilled (il prodotto soddifa abbastanza requisiti da meritare la piena approvazione degli stakeholders).\r\n",
        "eng": ""
    },
    "228": {
        "id": "specifica_tecnica",
        "voce": "Specifica Tecnica",
        "def": "\u00c8 prodotta a valle dell'Analisi dei Requisiti; fissa linee e strategie di realizzazione, avvia la fase realizzativa, ma non fissa i dettagli implementativi.\r\n>Mostra ci\u00f2 che deve fare il sistema. \r\n>Organizzata gerarcicamente attraverso pi\u00f9 livelli di decomposizione (o tramite generalizzazione, specializzazione, aggregazione)\r\n>Stabilisce le relazioni tra cause ed effetti\r\n>Porta una visione d'insieme della soluzione proposta\r\n>Per ogni componente:\r\n - funzione svolta \r\n - tipo dati in ingresso\r\n - tipo dati in uscita\r\n - risorse logiche e fisiche necessarie al funzionamento",
        "eng": ""
    },
    "229": {
        "id": "definizione_prodotto",
        "voce": "Definizione di Prodotto",
        "def": "L'architettura di dettaglio porta alla definizione di prodotto\r\n>Procede dall'architettura logica\r\n>Consente lo sviluppo parallelo dei componenti terminali\r\n>Consente di stimare costo e tempi di realizzazione\r\n>Conforme alle qualit\u00e0 perseguite nell'architettura logica (alta coesione ed utilit\u00e0=fan-in; bassa dipendenza=fan.out, comlessit\u00e0 ed accoppiamento).\r\n>Decompone i componenti architetturali in moduli a grana pi\u00f9 fine finch\u00e8 ogni modulo ha dimensione, coesione, complessit\u00e0 ed accoppiamento appropriati per la codifica in parallelo>\r\n>Deve fornire tutti i dettagli necesari alla codifica e verfica di ciascun modulo (la natura specifica di modulo \u00e8 determinata dal linguaggio in uso).",
        "eng": ""
    },
    "231": {
        "id": "tracciamento_requisiti",
        "voce": "Tracciamento dei requisiti",
        "def": ">Fissa la relazione tra i prodotti del processo di sviluppo, usando matrici di tracciabilit\u00e0.\r\n>In avanti (forward) -> completezza. Ciascun ingresso ad una fase deve essere messo in relazione con una specifica uscita da quella fase. Fatta con le matrici di tracciabilit\u00e0.\r\n>All'indietro (backward) -> necessit\u00e0. Ciascuna uscita dalla fase dev'essere messa in relazione con uno specifico ingresso a quella fase.",
        "eng": ""
    },
    "232": {
        "id": "manuale_utente",
        "voce": "Manuale Utente",
        "def": "Adatto alle caratteristiche dell'utente e dell'interfaccia utente.\r\nSi caratterizza per l'evoluzione e per la forma: nasce presto e cresce con il prodotto, pu\u00f2 essere un documento cartaceo tradizionale\/un ipertesto\/essere on-line con il prodotto\/un aiuto contestuale.\r\nAl suo interno si predilige la forma attiva alla passiva, la correttezza grammaticale e tipografica, frasi brevi ed introno ad un solo fatto, le liste alle frasi, dei paragrafi brevi e fatti di poche frasi, uno stile non verboso ed una terminologia precisa, l'uso di pi\u00f9 punti di vista per descrizioni complesse ed infine sezioni e sottosezioni titolate.",
        "eng": "User manual"
    },
    "233": {
        "id": "qualit\u00e0",
        "voce": "Qualit\u00e0",
        "def": "L'insieme delle caratteristiche di un'entit\u00e0 che ne determinano la capacit\u00e0 di soddisfare esigenze espresse e implicite.\r\nAree nelle quali interviene il sistema qualit\u00e0:\r\n-Qualit\u00e0 intrinseca (conformit\u00e0 ai requisiti ed idoneit\u00e0 nell'uso)\r\n-Qualit\u00e0 relativa (soddisfazione del cliente)\r\n-qualit\u00e0 quantitativa (misura del livello di qualit\u00e0 per confronto)",
        "eng": "quality"
    },
    "235": {
        "id": "sistema_qualit\u00e0",
        "voce": "Sistema qualit\u00e0",
        "def": "La struttura organizzativa, le responsabilit\u00e0, le procedure, i procedimenti e le risorse messe in atto per il perseguimento della qualit\u00e0.\r\nAmbiti:\r\n-pianificazione (definizione di politica ed obiettivi)\r\n-controllo\r\n-miglioramento continuo",
        "eng": ""
    },
    "236": {
        "id": "pianificazione_qualit\u00e0",
        "voce": "Pianificazione di qualit\u00e0",
        "def": "Le attivit\u00e0 del sistema qualit\u00e0 mirate a fissare gli obiettivi di qualit\u00e0, i processi e le risorse necessarie per conseguirli.\r\nVedi: piano di qualit\u00e0",
        "eng": ""
    },
    "238": {
        "id": "controllo_qualit\u00e0",
        "voce": "Controllo di qualit\u00e0",
        "def": "Le attivit\u00e0 del sistema qualit\u00e0 pianificate ed attuate al fine che il prodotto soddisfi i requisti attesi.\r\nModalit\u00e0 ed ambiti di controllo sono: \r\n-comprensione ed analisi del dominio;\r\n-verifica (di attivit\u00e0 di processo)\r\n-validazione (di prodotto)\r\n-quality assurance (preventiva invece che correttiva)",
        "eng": ""
    },
    "240": {
        "id": "ISO_IEC 14598",
        "voce": "ISO\/IEC 14598",
        "def": "Standard internazionale che fornisce un processo per la valutazione della qualit\u00e0 del software; integra ISO\/IEC 9216.\r\nDefinizione di metriche per la valutazione delle caratteristiche rilevanti.\r\nMisurazione della qualit\u00e0 software.\r\nMisurazione quantitativa: l'uso di una metrica per assegnare un valore (numero o categoria) su una scala predefinita.\r\nIl processo attraverso cui, secondo regole definite, simboli o numeri sono assegnate ad attributi di una entit\u00e0.",
        "eng": "ISO\/IEC 14598"
    },
    "241": {
        "id": "ISO_IEC 25000",
        "voce": "ISO\/IEC 25000",
        "def": "Famiglia di standard internazionali che vogliono fornire un framework per la valutazione della qualit\u00e0 del software; ha inglobato ISO\/IEC 9126 e ISO\/IEC 14598.\r\nSQuaRE: Software product Requirements And Evaluation:",
        "eng": "ISO\/IEC 25000"
    },
    "242": {
        "id": "metrica_software",
        "voce": "Metrica software",
        "def": "Ogni tipo di misura riferita ad un sistema, processo o documento  software.\r\nEs. Programma (SLOC), testo (Gunning fog index). Effort (person-days).\r\nPermetta al prodotto ed al processo d'essere quantificati.\r\nPu\u00f2 essere usato per predire attributi del prodotto oppure per controllare il processo software.\r\nLe matriche di prodotto possono esere usa per fare predizioni generali o per identificare componenti anomale.",
        "eng": "Software metrics"
    },
    "243": {
        "id": "metriche_asserzioni",
        "voce": "Metriche: asserzioni",
        "def": "La propriet\u00e0 o l'attributo del software pu\u00f2 essere misurato.\r\nEsiste una relazione tra quanto possiamo misurare e quanto vogliamo sapere (conosciamo solo come misurare attributi interni, ma spesso siamo interessati agli attributi esterni).\r\nLa relazione \u00e8 stata formalizzata e validata.\r\nPu\u00f2 essere difficile collegare quanto pu\u00f2 essere misurato, agli attributi esterni di qualit\u00e0 che si desidera.",
        "eng": "Metrics assumptions"
    },
    "244": {
        "id": "qualit\u00e0_processo",
        "voce": "Qualit\u00e0 di processo",
        "def": "Esigenze:\r\n>organizzazione e diffusione interna sistematica\r\n>Identificazione di prodotti intermedi e di momenti di verifica\r\n>Riproducibilit\u00e0 dei risultati\r\n>Quality assurance (proattiva, preventiva)\r\nObietivi:\r\n>Definire il processo, per controllarlo e renderlo pi\u00f9 facilmente controllabile e raccontarlo in maniera pi\u00f9 convincente\r\n>Controllare il processo per migliorarlo (efficacia: prodotti conformi alle attese; efficienza: minori costi a pari qualit\u00e0 di prodotto; esperienza: apprenderne, anche da altri)\r\n>Usare buoni strumenti di valutazione.",
        "eng": ""
    },
    "245": {
        "id": "manuale_qualit\u00e0",
        "voce": "Manuale della qualit\u00e0",
        "def": "Documento che definisce il sistema di gestione della qualit\u00e0 di un'organizzazione.\r\n\u00c8 una visione ad alto livello, che si integra con le procedure aziendali, fissa gli obiettivi di qualit\u00e0 e le strategie attuative (esprime la politica aziendale rispetto alla qualit\u00e0); specifica le modalit\u00e0 per la sua evoluzione.",
        "eng": ""
    },
    "246": {
        "id": "sgq",
        "voce": "SGQ",
        "def": "Sistema di Gestione Qualit\u00e0. Ha come responsabilit\u00e0 di garantire la qualit\u00e0 in maniera trasversale a settori e reparti.\r\nRiferisce direttamente alla Direzione",
        "eng": ""
    },
    "247": {
        "id": "piano_di_qualit\u00e0",
        "voce": "Piano di qualit\u00e0",
        "def": "Fissa le politiche aziendali per il perseguimento della qualit\u00e0 (visione orizzontale: trasversale sull'intera organizzazione).\r\nDetermina gli obiettivi di qualit\u00e0 del singolo progetto (visione verticale: specificatamente per un prodotto\/servizio).\r\nAssume l'uso di opportuni strumenti e modalit\u00e0 di controllo.\r\n\r\nDocumento che definisce gli elementi del SGQ e le risorse che devono essere applicate in uno specifico caso (prodotto, processo, progetto).\r\nOperativamente, concretizza il Manuale della Qualit\u00e0 a livello di progetto (sotto specifici vincoli di tempo e risorse); pu\u00f2 avere valenza contrattuale.\r\nIn pratica si deve accertare la disponbiliti\u00e0 dell'analisi dei requisiti, di architettura e soluzioni tecniche, la pianificazione delle verifiche e dei risultati delle verifiche; inoltre della conformit\u00e0 ai modelli fissati nelle norme, la tracciabilit\u00e0 tra soluzioni e requisiti, ed assicurare la buona pianificazione delle attivit\u00e0 (per uso di risorse).",
        "eng": ""
    },
    "248": {
        "id": "strumenti_valutazione_qualit\u00e0",
        "voce": "Strumenti di valutazione della qualit\u00e0",
        "def": "SPY, CMM->CMMI, Spice ed ISO\/IEC 15504",
        "eng": ""
    },
    "249": {
        "id": "SPY",
        "voce": "SPY",
        "def": "Software Process Assessment and Improvement, standard per il miglioramento e la valutazione della qualit\u00e0 di processo.\r\nCOnsite nella valutazione oggettiva dei processi di una organizzazione, per darne un giudizio di maturit\u00e0 ed individuare azioni migliorative.",
        "eng": "SPY"
    },
    "251": {
        "id": "ISO_IEC 15504",
        "voce": "ISO\/IEC 15504:1998",
        "def": "Standard internazionale per il miglioramento e la valutazione della qualit\u00e0 di processo.\r\nNato per armonizzare SPY con ISO\/IEC 12207 ed ISO 9001.",
        "eng": "ISO\/IEC 15504"
    },
    "252": {
        "id": "CMMI",
        "voce": "CMMI",
        "def": "Capability Maturity Model + Integration\r\nStandard per il miglioramento e la valutazione della qualit\u00e0 di processo.\r\nDefinito su commessa del DoD al SEI di CMU. \u00c8 un modello per la valutazione uniforme dei fornitori.\r\nCapability: misura quant'\u00e8 adeguato un processo per gli scopi per cui  \u00e8 stato definito. Caratteristica di un processo misurato singolarmente; determina l'intorno del risultato (di efficienza ed efficacia) raggiungibile usando quel processo. Un processo che ne ha tanta \u00e8 seguito da tutti in modo disciplinato, sistematico e quantificabile, in caso contrario dipenderebbe da chi lo attua, sarebbe definito e seguito in modo opportunistico, sarebbe difficicle prevederne l'esito, avanzamento e qualit\u00e0.\r\nMaturity: misura di quando \u00e8 governato il sistema dei processi dell'azienda. Caratteristica d'un insieme di processi (quelli significativi rispondono alle esigenze di miglioramento continuo dell'organizzazione); risulta dall'effetto combinato delle capability dei processi coinvolti. 5 livelli: Optimizing, Qualitatively managed, Defined, Managed, Initial)\r\nModel: insieme di requisiti via via pi\u00f9 stringenti per valutare il percorso di miglioramento dei processi dell'azienda (utile per confrontarne di diverse).\r\nIntegration: architettura di integrazione delle diverse discipline (sys, HW, SW) e tipologie di attivit\u00e0 delle aziende",
        "eng": "CMMI"
    },
    "253": {
        "id": "verificatore",
        "voce": "verificatore (profilo professionale)",
        "def": "Chi verifica il lavoro dei programmatori.",
        "eng": "verifier"
    },
    "254": {
        "id": "architettura_qualita",
        "voce": "Architettura: qualit\u00e0 possedute",
        "def": ">Sufficienza: \u00e8 capace di soddisfare tutti i req.\r\n>Comprensibilit\u00e0: pu\u00f2 essere capita dai portatori d'interesse\r\n>Modularit\u00e0: \u00e8 suddivisa in parti chiare e ben distinte\r\n>Robustezza: sopporta ingressi diversi dall'utente e dall'ambiente\r\n>Flessibilit\u00e0: permette modifiche a costo contenuto, al variare dei req.\r\n>Riusabilit\u00e0: le sue parti possono essere utilmente impiegate in altre applicazioni\r\n>Efficienza: nel tempo, nello spazio, nelle comunicazioni\r\n>Affidabilit\u00e0: altamente probabile che svolga bene il suo compito quando utilizzata.\r\n>Disponibilit\u00e0: necessita di poco o nullo tempo di manutenzione fuori linea\r\n>Sicurezza rispetto a malfunzionamenti: \u00e8 senete da malfunzionamenti gravi\r\n>Sicurezza rispetto ad intrusioni: i sui dati e le sue funzioni non sono vulnerabili a intrusioni\r\n>Semplicit\u00e0: ogni parte contiene solo il necessario e niente di superfluo\r\n>Incapsulazione (information hiding): l'interno delle componenti non \u00e8 visibile dall'esterno\r\n>Coesione: le parti che stanno insieme hanno gli stessi obiettivi\r\n>Basso accoppiamento: parti distinte dipendono poco o niente le une dalle altre.",
        "eng": ""
    },
    "255": {
        "id": "verifica_software",
        "voce": "verifica del software",
        "def": "Fornisce evidenza obiettica che le le usciete del design di una particolare fase del ciclo di vita del software soddisfano tutti gli specifici requisiti di quella fase.\r\nLa verifica del software guarda alla consistenza, completezza e correttezza del software e della sua documentazione di supporto, durante la sua produzione, fornisce inoltre supporto a poter dire -\r\ndi conseguenza - che il software \u00e8 stato validaato.",
        "eng": ""
    },
    "256": {
        "id": "validazione_software",
        "voce": "validazione del software",
        "def": "Conferma tramite esami e fornendo evidenze obiettive che le specifiche del sofware sono conformi ai bisogni degli utenti e degli usi che ne sono intesi, e che i requisiti particolari implementati tramite software sono consistentemente soddisfatti",
        "eng": ""
    },
    "257": {
        "id": "verifica",
        "voce": "verifica",
        "def": "Valutare se un prodotto soddisfa requisiti, regole o altre condizioni necessarie.\r\nAccertare che l'esecuzione delle attivit\u00e0 di processo non abbia introdotto errori. Rivolta ai processi: viene svolta per accertare il rispetto di regole, convezioni o procedure.\r\nSi occupa di accertare che l'esecuzione delle attivit\u00e0 di processi svolti nella fase in esame non abbia introdotto errori nel prodotto",
        "eng": "verification"
    },
    "258": {
        "id": "validazione",
        "voce": "validazione",
        "def": "S'occupa di accertare che il prodotto realizzato corrisponda alle attese.\r\nLa garanzia che un prodotto soddisfi i requisiti da cui \u00e8 nato.\r\n\u00c8 rivolta ai prodotti finali.",
        "eng": "validation"
    },
    "260": {
        "id": "analisi_dinamica",
        "voce": "analisi dinamica",
        "def": "Valutazione di un sistema (o di una sua componente) basata sul suo comportamento durante l'esecuzione.\r\nRichiede l'esecuzione del programma, viene effettuata tramite prove (test) ed \u00e8 usata sia nella verifica che nella validazione.\r\nLa ripetibilit\u00e0 \u00e8 un requisito essenziale: AMBIENTE(hw, stato iniziale), SPECIFICHE (ingressi rich., comportamenti attesi), PROCEDURE (esecuzione ed analisi dei risultati).\r\nStrumenti usati: Driver, Stub e Logger.",
        "eng": "dynamic analysis"
    },
    "261": {
        "id": "unit\u00e0",
        "voce": "unit\u00e0",
        "def": "Insieme coeso di moduli, appaltabili in realizzazione a un singolo programmatore; non ha sempre un corrispondente diretto in un linguaggio di programmazione. \u00c8 anche la pi\u00f9 piccola quantit\u00e0 di software che conviene verificare da sola; tipicamente \u00e8 prodotta da un singolo programmatore.\r\nLa sua natura specifica dipende dal lignuaggio di programmazione in uso.\r\nNon linee di codice ma entit\u00e0 di strutturazione (procedura, classe, package).",
        "eng": "unit"
    },
    "262": {
        "id": "modulo",
        "voce": "modulo",
        "def": "L'elemento atomico dell'architettura di un software; tipicamente una classe o un interfaccia.\r\nParte dell'unit\u00e0.",
        "eng": "module"
    },
    "263": {
        "id": "componente",
        "voce": "componente",
        "def": "Insieme di unit\u00e0 funzionalmente coese; parte di un sistema. (In Java, rappresentabile da uno o pi\u00f9 package.)\r\nIntegra pi\u00f9 unit\u00e0.",
        "eng": "component"
    },
    "264": {
        "id": "test_di_unit\u00e0",
        "voce": "test di unit\u00e0",
        "def": "Test che verifica la correttezza di una singola unit\u00e0 del sistema in esame.\r\n\u00c8 un'attivit\u00e0 di analisi dinamica fatta con il supporto di attivit\u00e0 dell'analisi statica, ha lo scopo di determinare limiti di iterazioni, flusso del programma oppure valori di variabili. Viene svolta con il massimo grado di parallelismo.\r\nLa responsabilit\u00e0 \u00e8 del singolo programmatore per le unit\u00e0 pi\u00f9 semplici, altrimenti di un verificatore indipendente, meglio un automa.\r\nL'obiettivo \u00e8 di verificare la correttezza del codice \"as implemented\".",
        "eng": "unit test"
    },
    "265": {
        "id": "test_di_integrazione",
        "voce": "test di integrazione",
        "def": "Test che verifica la correttezza dell'integrazione di un insieme di unit\u00e0 in una componente del sistema in esame.\r\nFatto per la costruzione e la verifica incrementale del sistema, su componenti sviluppate in parallelo e verificate incrementalmente. In cond. ottimanli, l'inegrazione \u00e8 priva di problemi. \r\nRileva: errori residui nella realizzazione dei componenti, la modifica delle interfacce o cambiamenti nei requisiti, riuso di componenti dal comportamento oscuro o inadatto, l'integrazione con altre applicazioni non ben conosciute.",
        "eng": "integration test"
    },
    "266": {
        "id": "test_di_sistema",
        "voce": "test di sistema",
        "def": "Test che verifica la copertura dei requisiti da parte del sistema in esame.\r\nDurante la validazione \u00e8 un'attivit\u00e0 interna del fornitore (per accertare la copertura dei requisiti sw).",
        "eng": "system test"
    },
    "267": {
        "id": "collaudo",
        "voce": "collaudo",
        "def": "Durante la validazione, \u00e8 un'attivit\u00e0 supervisionata dal committente, come dimostrazione di conformit\u00e0 del prodotto sulla base di casi di prova specificati nel o implicati dal contratto.\r\n\u00c8 un'attivit\u00e0 formale per il contratto.\r\nSegue il rilascio del prodotto (con eventuale garanzia) e la fine della commessa (con eventuale manutenzione).",
        "eng": ""
    },
    "268": {
        "id": "test_regressione",
        "voce": "test di regressione",
        "def": "\u00c8 l'insieme di test (test di unit\u00e0 e di integrazione) necessari ad accertare che la modifica di una parte P di S non causi errori in P o nelle altre parti di S che hanno relazioni con P.\r\n->ripetizione di test gi\u00e0 previsti ed effettuati per ogni parte coinvolta.\r\nModifiche effettuate per aggiunta, correzione o rimozione non devono pregiudicare le funzionalit\u00e0 gi\u00e0 verificate (rischio aumenta all'aumentare dell'accoppiamento ed al diminuire dell'incapsulazione)",
        "eng": ""
    },
    "269": {
        "id": "analisi_statica",
        "voce": "analisi statica",
        "def": "Valutazione di un sistema (o di una sua componente) basata sulla sua forma, struttura, contenuto o documentazione. Non richiede l'esecuzione del software in alcuna sua parte, \u00e8 essenziale quando il sistema non \u00e8 ancora completamente disponibile. Studia le caratteristiche del codice sorgente e talvolta del codice oggetto e della documentazione associata, alla ricerca della conformit\u00e0 a regole date, l'assenza da difetti e la presenza di propriet\u00e0 positive.\r\nApplicano ad ogni prodotto di processo (non solo sw: per tutti i processi attivati nel prj).\r\nMetodi di lettura (desk check) sono applicati solo per prodotti semplici).\r\nMetodi formali, si basano sulla prova assistita di proprit\u00e0, la cui dimostrazione dinamica pu\u00f2 essere troppo onerosa; verifica di equivalenza o generazione automatica.",
        "eng": "static analysis"
    },
    "272": {
        "id": "inspection",
        "voce": "inspection",
        "def": "Tecnica di analisi statica che consiste nell'eseguire una lettura mirata, alla ricerca di errori noti.\r\nPunta a rilevare la presenza di difetti, svolta da verificatori distinti e separati dai programmatori. Si focalizza sulla ricerca di presupposti (error guessing).\r\nViene svolta in 4 fasi: la pianificazione, la definizione della lista di controllo, la lettura vera e propria e la correzione dei difetti; in ogni fase la documentazione serve a tenere traccia delle attivit\u00e0 svolte.",
        "eng": "inspection"
    },
    "273": {
        "id": "walkthrough",
        "voce": "walkthrough",
        "def": "Tecnica di analisi statica che consiste nell'eseguire una lettura critica, ad ampio spettro, senza l'assunzione di presupposti.\r\nPunta a rilevare la presenza di difetti, viene svolta da gruppi misti d ispettori\/sviluppatori ma con ruoli ben distinti.\r\nLa strategia con cui si svolge \u00e8 di percorrere il codice simulandone possibili esecuzioni.\r\nSi svolge anch'essa in 4 fasi: la pianificazione, la lettura, la discussione ed infine la correzione dei difetti. Anche qui, la documentazione viene compilata per avere un rapporto delle attivit\u00e0 svolte.",
        "eng": "walkthrough"
    },
    "274": {
        "id": "metodi_di_lettura",
        "voce": "metodi di lettura",
        "def": "Svolti durante l'analisi statica durante le fasi di verifica e validazione. \r\nInspection e walkthrough.\r\nSono metodi pratici, basati sulla lettura della documentazione sul prodotto. La loro efficacia dipende dall'esperienza dei verificatori (nell'organizzare le attivit\u00e0 di verifica e nel documentare le attivit\u00e0 svolte ed i risultati ottenuti).\r\nSono modalit\u00e0 relativamente complementari!\r\nLe affinit\u00e0 sono: hanno controlli basati su desk check, hanno programmatori e verificatori su fronti opposti, compilano documentazione formale.\r\nDifferenze: l'inspection \u00e8 basato su errori presupposti, ed \u00e8 pi\u00f9 rapido, il walkthough richiede maggiore attenzione per\u00f2 \u00e8 pi\u00f9 collaborativo.",
        "eng": ""
    },
    "275": {
        "id": "quality_assurance",
        "voce": "quality assurance",
        "def": "Insieme di attivit\u00e0 che valutano i processi con i quali un prodotto viene sviluppato.\r\nServe a raccogliere tempestivamente evidenza oggettiva e di qualit\u00e0, a fronte di specifiche metriche ed obiettivi definiti, per dare evidenza oggettiva, per controllo (interno) ed accertamento (esterno).\r\nUsa ISO\/IEC 9126 come riferimento; la qualit\u00e0 \u00e8 valutata a posteriori.",
        "eng": "quality assurance"
    },
    "276": {
        "id": "ISO_IEC 9126",
        "voce": "ISO\/IEC 9126",
        "def": "Standard internazionale che fornisce un modello per la qualit\u00e0 del software.\r\nPropone un approccio alla qualit\u00e0 in modo che le aziende possano migliorare l'organizzazione ed i processi, e come conseguenza concreta, il prodotto sviluppato.\r\nCatalogazione sistematica delle caratteristiche rilevanti.\r\n>Visione esterna: relativa all'esecuzione del prodotto (product requirements)\r\n>Visone interna: relativa al prodotto non in esecuzione (product-component requirements)\r\n>Visione in uso: relativa alla percezione dell'utente\/operatore (customer requirements).\r\nIl modello di qualit\u00e0 stabilito nella prima parte dello standard,  \u00e8 classificato da sei caratteristiche generali (funzionalit\u00e0, affidabilit\u00e0, efficienza, usabilit\u00e0, manutenibilit\u00e0, portabilit\u00e0).\r\nLa funzionalit\u00e0 \u00e8 un \"requisito funzionale\" a differenza delle ultime cinque caratteristiche chiamate invece \" requisiti non funzionali\" o \"requisiti di qualit\u00e0\".",
        "eng": "ISO\/IEC 9126"
    }
}